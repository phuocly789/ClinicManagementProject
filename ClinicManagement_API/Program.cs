using System.Security.Claims;
using System.Text;
using System.Text.Json.Serialization;
using ClinicManagement_Infrastructure.Data;
using ClinicManagement_Infrastructure.Repositories;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;

AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);
var builder = WebApplication.CreateBuilder(args);

// ƒêƒÉng k√Ω DbContext v·ªõi connection string t·ª´ appsettings.json
builder.Services.AddDbContext<SupabaseContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("SupabaseConnection"))
);

// ƒêƒÉng k√Ω repository services
builder.Services.AddRepositoryServices();

// ƒêƒÉng k√Ω c√°c d·ªãch v·ª• kh√°c (n·∫øu c√≥)
builder.Services.AddScoped<UnitOfWork>();
builder.Services.AddScoped(typeof(IServiceBase<>), typeof(ServiceBase<>));
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<IPatinetService, PatinetService>();
builder.Services.AddScoped<IReceptionistService, ReceptionistService>();
builder.Services.AddScoped<IAdminService, AdminService>();
builder.Services.AddScoped<IServiceService, ServiceService>();
builder.Services.AddScoped<IMedicineService, MedicineService>();
builder.Services.AddScoped<IImportService, ImportService>();
builder.Services.AddScoped<ISuplierService, SuplierService>();
builder.Services.AddScoped<IReportsService, ReportsService>();
builder.Services.AddScoped<IDoctorService, DoctorService>();
builder.Services.AddScoped<ITechnicianService, TechnicianService>();
builder.Services.AddScoped<IScheduleService, ScheduleService>();

// Th√™m d·ªãch v·ª• controller
builder
    .Services.AddControllers()
    .AddJsonOptions(options =>
    {
        // TH√äM D√íNG N√ÄY V√ÄO
        options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
    });

//jwt
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" });

    // üî• Th√™m h·ªó tr·ª£ Authorization header t·∫•t c·∫£ api
    options.AddSecurityDefinition(
        "Bearer",
        new OpenApiSecurityScheme
        {
            Name = "Authorization",
            Type = SecuritySchemeType.Http,
            Scheme = "Bearer",
            BearerFormat = "JWT",
            In = ParameterLocation.Header,
            Description = "Nh·∫≠p token v√†o √¥ b√™n d∆∞·ªõi theo ƒë·ªãnh d·∫°ng: Bearer {token}",
        }
    );

    // üî• ƒê·ªãnh nghƒ©a y√™u c·∫ßu s·ª≠ d·ª•ng Authorization tr√™n t·ª´ng api
    options.AddSecurityRequirement(
        new OpenApiSecurityRequirement
        {
            {
                new OpenApiSecurityScheme
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer",
                    },
                },
                new string[] { }
            },
        }
    );
});

//add service cors
builder.Services.AddCors(options =>
{
    options.AddPolicy(
        "AllowAllOrigins",
        builder =>
            builder
                .WithOrigins(
                    "http://localhost:5098",
                    "https://localhost:5001",
                    "https://localhost:5066"
                )
                .AllowAnyMethod()
                .AllowAnyHeader()
                .AllowCredentials()
    );
});

//c√†i ƒë·∫∑t jwt
//Service jwt
//Th√™m middleware authentication
var privateKey = builder.Configuration["jwt:Serect-Key"];
var Issuer = builder.Configuration["jwt:Issuer"];
var Audience = builder.Configuration["jwt:Audience"];

// Th√™m d·ªãch v·ª• Authentication v√†o ·ª©ng d·ª•ng, s·ª≠ d·ª•ng JWT Bearer l√†m ph∆∞∆°ng th·ª©c x√°c th·ª±c
builder
    .Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        // Thi·∫øt l·∫≠p c√°c tham s·ªë x√°c th·ª±c token
        options.TokenValidationParameters = new TokenValidationParameters()
        {
            // Ki·ªÉm tra v√† x√°c nh·∫≠n Issuer (ngu·ªìn ph√°t h√†nh token)
            ValidateIssuer = true,
            ValidIssuer = Issuer, // Bi·∫øn `Issuer` ch·ª©a gi√° tr·ªã c·ªßa Issuer h·ª£p l·ªá
            // Ki·ªÉm tra v√† x√°c nh·∫≠n Audience (ƒë·ªëi t∆∞·ª£ng nh·∫≠n token)
            ValidateAudience = true,
            ValidAudience = Audience, // Bi·∫øn `Audience` ch·ª©a gi√° tr·ªã c·ªßa Audience h·ª£p l·ªá
            // Ki·ªÉm tra v√† x√°c nh·∫≠n kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k√Ω token
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(privateKey)),
            // S·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t (`privateKey`) ƒë·ªÉ t·∫°o SymmetricSecurityKey nh·∫±m x√°c th·ª±c ch·ªØ k√Ω c·ªßa token
            // Gi·∫£m ƒë·ªô tr·ªÖ (skew time) c·ªßa token xu·ªëng 0, ƒë·∫£m b·∫£o token h·∫øt h·∫°n ch√≠nh x√°c
            ClockSkew = TimeSpan.Zero,
            // X√°c ƒë·ªãnh claim ch·ª©a vai tr√≤ c·ªßa user (ƒë·ªÉ ph√¢n quy·ªÅn)
            RoleClaimType = ClaimTypes.Role,
            // X√°c ƒë·ªãnh claim ch·ª©a t√™n c·ªßa user
            NameClaimType = ClaimTypes.Name,
            // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n c·ªßa token, kh√¥ng cho ph√©p s·ª≠ d·ª•ng token h·∫øt h·∫°n
            ValidateLifetime = true,
        };
    });

// Th√™m d·ªãch v·ª• Authorization ƒë·ªÉ h·ªó tr·ª£ ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
builder.Services.AddAuthorization();

//add jwt service
builder.Services.AddScoped<JwtAuthService>();

var app = builder.Build();

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

//use middle ware controller
app.MapControllers();

//use swagger
app.UseSwagger();
app.UseSwaggerUI();

app.Run();
