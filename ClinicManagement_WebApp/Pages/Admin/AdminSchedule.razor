@page "/admin/schedule-management"
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<PageTitle>Quản Lý Lịch Làm Việc</PageTitle>

<Loading IsLoading="@isLoading" />

<div class="main-content">
    <header class="header d-flex justify-content-between align-items-center mb-3">
        <div class="d-flex justify-content-end">
        <h1>Lịch Làm Việc Nhân Viên</h1>
            <span class="badge" style="background-color:#28a745">Bác sĩ</span>
            <span class="badge" style="background-color:#ffc107">Y tá</span>
            <span class="badge" style="background-color:#dc3545">Lễ tân</span>
            <span class="badge" style="background-color:#6c757d">Kĩ thuật</span>
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-secondary" @onclick="ExportToCsv">Xuất CSV</button>
            
            <button style="width: 400px" class="btn btn-primary" @onclick="ShowAddForm">+ Thêm Lịch</button>
        </div>
    </header>

    <ToastNotification IsVisible="@showToast" Message="@toastMessage" ToastType="@toastType" OnClose="@HideToast" />

  
    <div class="mb-3 d-flex gap-2 justify-content-between">
       
    </div>

    <!-- Bảng -->
    <div class="calendar-wrapper">
        <div id="calendar"></div>
    </div>

    <!-- Modal thêm/sửa -->
    @if (showForm)
    {
        <div class="modal-overlay">
            <div class="modal">
                <div class="modal-header">
                    <h3>@(editingScheduleId == 0 ? "Thêm Lịch Làm Việc" : "Cập Nhật Lịch Làm Việc")</h3>
                    <button class="close-button bg-secondary border-0" @onclick="CancelForm">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@scheduleForm" OnValidSubmit="@HandleFormSubmit">
                        <DataAnnotationsValidator />
                       <div class="form-group">
                            <label>Nhân viên:</label>
                            <InputSelect class="form-control" @bind-Value="scheduleForm.StaffId">
                                <option value="">-- Chọn nhân viên --</option>
                                @foreach (var schedule in Schedules.Where(s => s.Role != "Admin" && s.Role != "Patient"))
                                {
                                    <option value="@schedule.StaffId">@schedule.StaffName (@schedule.Role)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => scheduleForm.StaffId)" />

                        </div>

                        <div class="form-group">
                            <label>Ngày làm:</label>
                          <InputDate class="form-control"
                                    @bind-Value="scheduleForm.WorkDate"
                                    min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                            <ValidationMessage For="@(() => scheduleForm.WorkDate)" />

                        </div>
                        <div class="form-group">
                            <label>Giờ bắt đầu:</label>
                            <InputText class="form-control" @bind-Value="scheduleForm.StartTime" placeholder="HH:mm:ss" />
                        </div>
                        <div class="form-group">
                            <label>Giờ kết thúc:</label>
                            <InputText class="form-control" @bind-Value="scheduleForm.EndTime" placeholder="HH:mm:ss" />
                        </div>
                        <div class="form-group">
                            <label>Trạng thái:</label>
                            <InputCheckbox class="form-check-input" @bind-Value="scheduleForm.IsAvailable" /> Có mặt
                        </div>
                        <div class="modal-footer mt-3">
                            <button type="submit" class="btn btn-success">Lưu</button>
                            <button type="button" class="btn btn-danger" @onclick="CancelForm">Hủy</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

@* form detail *@
@if (showDetailsModal && selectedSchedule != null)
{
    <div class="modal-overlay" @onclick="HideDetailsModal">
        <div class="modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Chi tiết Lịch làm việc</h3>
                <button class="close-button bg-secondary border-0" @onclick="HideDetailsModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="info-row">
                    <span class="info-label">Nhân viên:</span>
                    <span class="info-value">@selectedSchedule.StaffName</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Chức vụ:</span>
                    <span class="info-value">@selectedSchedule.Role</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Ngày làm:</span>
                    <span class="info-value">@DateTime.Parse(selectedSchedule.WorkDate).ToString("dd/MM/yyyy")</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Thời gian:</span>
                    <span class="info-value">@selectedSchedule.StartTime - @selectedSchedule.EndTime</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Trạng thái:</span>
                    <span class="info-value">@(selectedSchedule.IsAvailable ? "Có mặt" : "Vắng")</span>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="HideDetailsModal">Đóng</button>
                <button class="btn btn-warning" @onclick="() => EditScheduleFromModal(selectedSchedule)">Sửa</button>
                <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmFromModal(selectedSchedule)">Xóa</button>
            </div>
        </div>
    </div>
}
<NotificationModal IsVisible="@showModal" Title="@modalTitle" Message="@modalMessage" ShowConfirmButton="true"
    OnConfirm="@ConfirmAction" OnCancel="@CancelModal" />
@code {
    private HttpClient _httpClient = null!;
    private DotNetObjectReference<AdminSchedule>? objRef;

    // --- State Variables ---
    private List<ScheduleForMedicalStaffResponse> Schedules = new();
    private bool isLoading = true;
    private bool _isRendered = false;

    // --- Toast Notification State ---
    private bool showToast = false;
    private string toastMessage = "";
    private string toastType = "info";

    // --- Add/Edit Form State ---
    private bool showForm = false;
    private int editingScheduleId = 0;
    private ScheduleFormModel scheduleForm = new();

    // --- Details Modal State ---
    private bool showDetailsModal = false;
    private ScheduleForMedicalStaffResponse? selectedSchedule;

    // --- Confirmation Modal State ---
    private bool showModal = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private int scheduleToDeleteId;

    // --- DTO for Form Binding ---
    public class ScheduleFormModel
    {
        [Required(ErrorMessage = "ID nhân viên là bắt buộc.")]
        [Range(1, int.MaxValue, ErrorMessage = "ID nhân viên không hợp lệ.")]
        public int? StaffId { get; set; }

        public DateTime WorkDate { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "Giờ bắt đầu là bắt buộc.")]
        [RegularExpression(@"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", ErrorMessage = "Định dạng giờ là HH:mm:ss.")]
        public string StartTime { get; set; } = "08:00:00";

        [Required(ErrorMessage = "Giờ kết thúc là bắt buộc.")]
        [RegularExpression(@"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", ErrorMessage = "Định dạng giờ là HH:mm:ss.")]
        public string EndTime { get; set; } = "17:00:00";
        public bool IsAvailable { get; set; } = true;
    }


    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClinicManagement_API");
        await LoadSchedules();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            _isRendered = true;
            await RenderCalendar();
        }
    }

    private async Task LoadSchedules()
    {
        isLoading = true;
        try
        {
            var response = await _httpClient.GetFromJsonAsync<ResponseValue<PagedResult<ScheduleForMedicalStaffResponse>>>("Schedule/GetAllSchedulesAsync");
            if (response?.Status == StatusReponse.Success && response.Content != null)
            {
                Schedules = response.Content.Items ?? new List<ScheduleForMedicalStaffResponse>();
                if (_isRendered) await RenderCalendar();
            }
            else
            {
                ShowToast($"Không tải được lịch: {response?.Message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi tải lịch: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RenderCalendar()
    {
        if (!_isRendered) return;
        try
        {
            var events = Schedules.Select(s =>
            {
                string role;
                var color = GetRoleColor(s, out role);
                var start = $"{s.WorkDate}T{s.StartTime}";
                var end = $"{s.WorkDate}T{s.EndTime}";
                return new
                {
                    id = s.ScheduleId,
                    title = $"{s.StaffName} ({role})<br>{s.StartTime[..5]} - {s.EndTime[..5]}",
                    start,
                    end,
                    backgroundColor = color,
                    borderColor = color,
                };
            }).ToArray();

            await JSRuntime.InvokeVoidAsync("renderScheduleCalendar", new { events = events, dotNetHelper = objRef });
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi hiển thị lịch: {ex.Message}", "error");
        }
    }

    private async Task HandleFormSubmit()
    {
        isLoading = true;
        try
        {
            // Tạo một DTO riêng để gửi đi với định dạng string cho WorkDate
            var requestDto = new
            {
                scheduleForm.StaffId,
                WorkDate = scheduleForm.WorkDate.ToString("yyyy-MM-dd"),
                scheduleForm.StartTime,
                scheduleForm.EndTime,
                scheduleForm.IsAvailable
            };

            HttpResponseMessage resp;
            if (editingScheduleId == 0)
            {
                resp = await _httpClient.PostAsJsonAsync("Schedule/CreateScheduleAsync", requestDto);
            }
            else
            {
                resp = await _httpClient.PutAsJsonAsync($"Schedule/UpdateScheduleAsync/{editingScheduleId}", requestDto);
            }

            if (resp.IsSuccessStatusCode)
            {
                ShowToast(editingScheduleId == 0 ? "Thêm thành công!" : "Cập nhật thành công!", "success");
                showForm = false;
                await LoadSchedules();
            }
            else
            {
                var responseText = await resp.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<ResponseValue<object>>(responseText, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                ShowToast($"Lưu thất bại: {result?.Message ?? "Lỗi không xác định"}", "error");

            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    // --- JSInvokable & Modal Logic ---

    [JSInvokable]
    public async Task HandleEventClick(string scheduleIdStr)
    {
        if (int.TryParse(scheduleIdStr, out int scheduleId))
        {
            var schedule = Schedules.FirstOrDefault(s => s.ScheduleId == scheduleId);
            if (schedule != null)
            {
                // Dùng InvokeAsync để đảm bảo cập nhật UI an toàn từ lệnh gọi của JS
                await InvokeAsync(() =>
                {
                    selectedSchedule = schedule;
                    showDetailsModal = true;
                    StateHasChanged();
                });
            }
        }
    }

    private void ShowAddForm()
    {
        editingScheduleId = 0;
        scheduleForm = new ScheduleFormModel();
        showForm = true;
    }

    private void EditScheduleFromModal(ScheduleForMedicalStaffResponse schedule)
    {
        HideDetailsModal();
        editingScheduleId = schedule.ScheduleId; // SỬA LẠI: Dùng ScheduleId
        scheduleForm = new ScheduleFormModel
        {
            StaffId = schedule.StaffId,
            WorkDate = DateTime.Parse(schedule.WorkDate), // SỬA LẠI: Chuyển string sang DateTime
            StartTime = schedule.StartTime,
            EndTime = schedule.EndTime,
            IsAvailable = schedule.IsAvailable
        };
        showForm = true;
    }

    private void ShowDeleteConfirmFromModal(ScheduleForMedicalStaffResponse schedule)
    {
        HideDetailsModal();
        scheduleToDeleteId = schedule.ScheduleId;
        modalTitle = "Xác nhận xóa";
        modalMessage = $"Bạn có chắc muốn xóa lịch làm việc của {schedule.StaffName} vào ngày {DateTime.Parse(schedule.WorkDate):dd/MM/yyyy}?";
        showModal = true;

        StateHasChanged();
    }

    private async Task ConfirmAction()
    {
        if (scheduleToDeleteId != 0)
        {
            await DeleteSchedule(scheduleToDeleteId);
        }
        CancelModal();
    }

    private async Task DeleteSchedule(int id)
    {
        isLoading = true;
        try
        {
            var resp = await _httpClient.DeleteAsync($"Schedule/DeleteScheduleAsync/{id}");
            if (resp.IsSuccessStatusCode)
            {
                ShowToast($"Xóa thành công lịch #{id}", "success");
                await LoadSchedules(); // Tải lại danh sách
            }
            else
            {
                ShowToast("Xóa thất bại", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xóa: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            scheduleToDeleteId = 0;
        }
    }

    private void CancelForm() => showForm = false;
    private void HideDetailsModal() => showDetailsModal = false;
    private void CancelModal() => showModal = false;

    // --- Toast & Color Helpers ---
    private void ShowToast(string message, string type)
    {
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
    }

    private Task HideToast()
    {
        showToast = false;
        return Task.CompletedTask;
    }

    private string GetRoleColor(ScheduleForMedicalStaffResponse schedule, out string role)
    {
        // ... hàm này giữ nguyên
        role = schedule?.Role ?? "Khác";
        return role.ToLowerInvariant() switch {
            "admin" => "#007bff",
            "doctor" or "bác sĩ" => "#28a745",
            "nurse" or "y tá" => "#ffc107",
            "patient" or "bệnh nhân" => "#dc3545",
            _ => "#6c757d",
        };
    }
    private async Task ExportToCsv()
    {
        var csv = "Mã Lịch,Mã Nhân Viên,Tên Nhân Viên,Ngày Làm,Giờ Bắt Đầu,Giờ Kết Thúc,Trạng Thái\n";
        foreach (var s in Schedules)
            csv += $"{s.ScheduleId},{s.StaffId},{s.StaffName},{s.WorkDate},{s.StartTime},{s.EndTime},{(s.IsAvailable ? "Có mặt" : "Vắng")}\n";
        
        await JSRuntime.InvokeVoidAsync("downloadCsv", "Schedules_All.csv", csv);
        ShowToast("Xuất CSV thành công!", "success");
    }
    
    // Dọn dẹp "cầu nối"
    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }
}