@page "/admin/services"
@using System.Text.Json
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
<PageTitle>Quản Lý Dịch Vụ</PageTitle>
<Loading IsLoading="@isLoading" />

<div class="main-content">
    <header class="header">
        <h1>Quản Lý Danh Mục Dịch Vụ</h1>
        <div>
            <input type="text" class="form-control" placeholder="Tìm kiếm dịch vụ..." @bind="searchQuery" @oninput="OnSearchInput" />
            <button style="width: 400px;" class="btn-primary" @onclick="ShowAddServiceForm">Thêm Dịch Vụ Mới</button>
        </div>
    </header>

    <!-- Toast thông báo -->
    <ToastNotification 
        IsVisible="@showToast"
        Message="@toastMessage"
        ToastType="@toastType"
        OnClose="@HideToast" />

    <!-- Modal form thêm/sửa dịch vụ -->
    @if (showForm)
    {
        <div class="modal-overlay">
            <div class="modal">
                <div class="modal-header">
                    <h3>@(isEditMode ? "Sửa Dịch Vụ" : "Thêm Dịch Vụ Mới")</h3>
                    <button class="close-button bg-secondary border-0" @onclick="CancelForm">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newService" OnValidSubmit="@HandleFormSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Tên Dịch Vụ:</label>
                            <InputText class="form-control" @bind-Value="newService.ServiceName" />
                            <ValidationMessage For="@(() => newService.ServiceName)" />
                        </div>
                        <div class="form-group">
                            <label>Loại Dịch Vụ:</label>
                            <InputSelect class="form-control" @bind-Value="newService.ServiceType">
                                <option value="">-- Chọn loại dịch vụ --</option>
                                @foreach (var type in ServiceTypes)
                                {
                                    <option value="@type.Name">@type.Description</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newService.ServiceType)" />
                        </div>
                        <div class="form-group">
                            <label>Giá:</label>
                            <InputNumber class="form-control" @bind-Value="newService.Price" />
                            <ValidationMessage For="@(() => newService.Price)" />
                        </div>
                        <div class="form-group">
                            <label>Mô Tả:</label>
                            <InputTextArea class="form-control" @bind-Value="newService.Description" rows="3" />
                            <ValidationMessage For="@(() => newService.Description)" />
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">@(isEditMode ? "Cập Nhật" : "Thêm")</button>
                            <button type="button" class="btn btn-danger" @onclick="CancelForm">Hủy</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <!-- Modal xác nhận xóa -->
    <NotificationModal 
        IsVisible="@showModal"
        Title="@modalTitle"
        Message="@modalMessage"
        ShowConfirmButton="true"
        OnConfirm="@ConfirmDelete"
        OnCancel="@CancelModal" />

    <!-- Danh sách dịch vụ -->   
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th style="width: 135px;">Mã Dịch Vụ</th>
                    <th style="width: 300px;">Tên Dịch Vụ</th>
                    <th style="width: 135px;">Loại Dịch Vụ</th>
                    <th style="width: 150px;">Giá</th>
                    <th>Mô Tả</th>
                    <th style="width: 135px;">Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @if (Services.Count == 0 || isLoading)
                {
                    <tr>
                        <td colspan="6">Không tìm thấy dịch vụ nào.</td>
                    </tr>
                }
                else
                {
                    @foreach (var service in Services)
                    {
                        <tr>
                            <td>@("service" + service.ServiceId)</td>
                            <td>@service.ServiceName</td>
                            <td>@service.ServiceType</td>
                            <td>@service.Price.ToString("N0") VNĐ</td>
                            <td>@service.Description</td>
                            <td>
                                <button class="btn btn-sm " title="Sửa thông tin" @onclick="() => EditService(service)">
                                    <lord-icon src="https://cdn.lordicon.com/vwzukuhn.json" trigger="hover"
                                        style="width:30px;height:30px">
                                    </lord-icon>
                                </button>
                                <button class="btn btn-sm" title="Xóa người dùng"
                                    @onclick="() => ShowDeleteConfirm(service.ServiceId)">
                                    <lord-icon src="https://cdn.lordicon.com/sxhqklqh.json" trigger="hover"
                                        style="width:30px;height:30px">
                                    </lord-icon>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>     

    <!-- Phân trang -->
    @if (totalPages > 1)
    {  
        <div class="pagination">
            <button class="btn-primary" disabled="@(currentPage <= 1)" @onclick="PreviousPage">Trước</button>
            <span>Trang @currentPage / @totalPages</span>
            <button class="btn-primary" disabled="@(currentPage >= totalPages)" @onclick="NextPage">Tiếp</button>
        </div>
    }
</div>

@code {
    private HttpClient _httpClient;
    private List<ServiceVM> Services { get; set; } = new List<ServiceVM>();
    private ServiceVM newService = new ServiceVM();
    private bool showForm = false;
    private bool isEditMode = false;
    private bool isLoading = false;
    private bool showModal = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private int serviceToDelete;
    private string searchQuery = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    private bool showToast = false;
    private string toastMessage = "";
    private string toastType = "info";
    private DateTime lastSearchTime = DateTime.MinValue;
    private readonly TimeSpan debounceDelay = TimeSpan.FromMilliseconds(500);
   public class ServiceType
    {   
    public string Name { get; set; }
    public string Description { get; set; }
    }

private List<ServiceType> ServiceTypes { get; set; } = new()
{
    new ServiceType { Name = "Examination", Description = "Khám bệnh" },
    new ServiceType { Name = "Test", Description = "Xét nghiệm" },
    new ServiceType { Name = "Imaging", Description = "Chẩn đoán hình ảnh" },
    new ServiceType { Name = "Endoscopy", Description = "Nội soi" },
    new ServiceType { Name = "Procedure", Description = "Thủ thuật" },
    new ServiceType { Name = "Vaccination", Description = "Tiêm chủng" },
    new ServiceType { Name = "Medical Report", Description = "Cấp giấy tờ y tế" }
};


    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClinicManagement_API");
        await LoadServices();
    }

    private async Task LoadServices()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            var query = $"Service/GetAllServicesAsync?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
            {
                query += $"&search={Uri.EscapeDataString(searchQuery)}";
            }
            Console.WriteLine($"Calling API: {query}");
            var response = await _httpClient.GetFromJsonAsync<ResponseValue<PagedResult<ServiceVM>>>(query);
            Console.WriteLine($"API Response Status: {response?.Status}, Items: {response?.Content?.Items?.Count}, Message: {response?.Message}");
            if (response?.Status == StatusReponse.Success && response.Content?.Items != null)
            {
                Services = response.Content.Items.ToList();
                totalItems = response.Content.TotalItems;
                totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            }
            else
            {
                ShowToast($"Không thể tải danh sách dịch vụ: {response?.Message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API Error: {ex.Message}");
            ShowToast($"Lỗi khi gọi API: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        if (DateTime.Now - lastSearchTime < debounceDelay)
        {
            return;
        }
        lastSearchTime = DateTime.Now;
        currentPage = 1;
        await LoadServices();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadServices();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadServices();
        }
    }

    private void ShowAddServiceForm()
    {
        Console.WriteLine("ShowAddServiceForm called");
        newService = new ServiceVM();
        showForm = true;
        isEditMode = false;
        showToast = false;
        StateHasChanged();
    }

    private void EditService(ServiceVM service)
    {
        Console.WriteLine($"EditService called for ID: {service.ServiceId}");
        newService = new ServiceVM
        {
            ServiceId = service.ServiceId,
            ServiceName = service.ServiceName,
            ServiceType = service.ServiceType,
            Price = service.Price,
            Description = service.Description
        };
        showForm = true;
        isEditMode = true;
        showToast = false;
        StateHasChanged();
    }

    private void ShowDeleteConfirm(int serviceId)
    {
        Console.WriteLine($"ShowDeleteConfirm called for ID: {serviceId}");
        serviceToDelete = serviceId;
        modalTitle = "Xác nhận xóa";
        modalMessage = $"Bạn có chắc muốn xóa dịch vụ với mã service{serviceId}?";
        showModal = true;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            Console.WriteLine($"Deleting service ID: {serviceToDelete}");
            var response = await _httpClient.DeleteAsync($"Service/DeleteServiceAsync/{serviceToDelete}");
            if (response.IsSuccessStatusCode)
            {
                Services.RemoveAll(s => s.ServiceId == serviceToDelete);
                ShowToast($"Đã xóa dịch vụ: {serviceToDelete}", "success");
                await LoadServices();
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<dynamic>();
                ShowToast($"Xóa dịch vụ thất bại: {error?.message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xóa dịch vụ: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            showModal = false;
            serviceToDelete = 0;
            StateHasChanged();
        }
    }

    private void CancelModal()
    {
        Console.WriteLine("CancelModal called");
        showModal = false;
        serviceToDelete = 0;
        StateHasChanged();
    }

    private async Task HandleFormSubmit()
    {
        try
        {
            if (isEditMode)
            {
                Console.WriteLine($"Updating service ID: {newService.ServiceId}, Data: {JsonSerializer.Serialize(newService)}");
                var response = await _httpClient.PutAsJsonAsync($"Service/UpdateServiceAsync/{newService.ServiceId}", newService);
                if (response.IsSuccessStatusCode)
                {
                    var updatedService = await response.Content.ReadFromJsonAsync<ResponseValue<ServiceVM>>();
                    if (updatedService?.Status == StatusReponse.Success && updatedService.Content != null)
                    {
                        var existingService = Services.FirstOrDefault(s => s.ServiceId == newService.ServiceId);
                        if (existingService != null)
                        {
                            existingService.ServiceName = updatedService.Content.ServiceName;
                            existingService.ServiceType = updatedService.Content.ServiceType;
                            existingService.Price = updatedService.Content.Price;
                            existingService.Description = updatedService.Content.Description;
                        }
                        ShowToast($"Đã cập nhật dịch vụ: {newService.ServiceName}", "success");
                        showForm = false;
                        newService = new ServiceVM(); // Đặt lại form khi thành công
                    }
                    else
                    {
                        ShowToast($"Cập nhật dịch vụ thất bại: {updatedService?.Message ?? "Lỗi không xác định"}", "error");
                        // Modal vẫn mở, giữ dữ liệu newService
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error Response: {errorContent}");
                    try
                    {
                        var error = await response.Content.ReadFromJsonAsync<ResponseValue<object>>();
                        ShowToast($"Cập nhật dịch vụ thất bại: {error?.Message ?? "Lỗi không xác định"}", "error");
                    }
                    catch
                    {
                        ShowToast($"Cập nhật dịch vụ thất bại: {errorContent}", "error");
                    }
                    // Modal vẫn mở, giữ dữ liệu newService
                }
            }
            else
            {
                Console.WriteLine($"Creating new service: {JsonSerializer.Serialize(newService)}");
                var response = await _httpClient.PostAsJsonAsync("Service/CreateServiceAsync", newService);
                if (response.IsSuccessStatusCode)
                {
                    var addedService = await response.Content.ReadFromJsonAsync<ResponseValue<ServiceVM>>();
                    if (addedService?.Status == StatusReponse.Success && addedService.Content != null)
                    {
                        Services.Add(addedService.Content);
                        ShowToast($"Đã thêm dịch vụ: {newService.ServiceName}", "success");
                        showForm = false;
                        newService = new ServiceVM(); // Đặt lại form khi thành công
                    }
                    else
                    {
                        ShowToast($"Thêm dịch vụ thất bại: {addedService?.Message ?? "Lỗi không xác định"}", "error");
                        // Modal vẫn mở, giữ dữ liệu newService
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error Response: {errorContent}");
                    try
                    {
                        var error = await response.Content.ReadFromJsonAsync<ResponseValue<object>>();
                        ShowToast($"Thêm dịch vụ thất bại: {error?.Message ?? "Lỗi không xác định"}", "error");
                    }
                    catch
                    {
                        ShowToast($"Thêm dịch vụ thất bại: {errorContent}", "error");
                    }
                    // Modal vẫn mở, giữ dữ liệu newService
                }
            }
            await LoadServices();
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xử lý dịch vụ: {ex.Message}", "error");
            // Modal vẫn mở, giữ dữ liệu newService
        }
        StateHasChanged();
    }

    private void CancelForm()
    {
        Console.WriteLine("CancelForm called");
        showForm = false;
        newService = new ServiceVM();
        showToast = false;
        StateHasChanged();
    }

    private void ShowToast(string message, string type)
    {
        Console.WriteLine($"ShowToast: {message}, Type: {type}");
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
    }

    private async Task HideToast()
    {
        Console.WriteLine("HideToast called");
        showToast = false;
        toastMessage = "";
        toastType = "info";
        StateHasChanged();
    }
}