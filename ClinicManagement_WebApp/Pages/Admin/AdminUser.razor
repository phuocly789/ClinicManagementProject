@page "/admin/users"
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
<PageTitle>Quản Lý người dùng</PageTitle>
<Loading IsLoading="@isLoading" />
<div class="main-content">
    <header class="header">
        <h1>Quản Lý Danh Mục người dùng</h1>
        <div>
            <input type="text" class="form-control" placeholder="Tìm kiếm người dùng..." @bind="searchQuery" @oninput="OnSearchInput" />
            <button style="width: 400px;" class="btn-primary" @onclick="ShowAddUserForm">Thêm người dùng Mới</button>
        </div>
    </header>

    <!-- Toast thông báo -->
    <ToastNotification 
        IsVisible="@showToast"
        Message="@toastMessage"
        ToastType="@toastType"
        OnClose="@HideToast" />

    <!-- Modal form thêm/sửa người dùng -->
   
@if (showForm)
{
    <div class="modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h3>@(isEditMode ? "Sửa thông tin người dùng" : "Thêm người dùng mới")</h3>
                <button class="close-button" @onclick="CancelForm">&times;</button>
            </div>

            <div class="modal-body">
                <EditForm Model="@newUser" OnValidSubmit="@HandleFormSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-section-title text-secondary fs-4">Thông tin cơ bản</div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Tên đăng nhập:</label>
                            <InputText id="username" class="form-control" @bind-Value="newUser.Username" />
                            <ValidationMessage For="@(() => newUser.Username)" />
                        </div>
                        <div class="form-group">
                            <label>Họ và tên:</label>
                            <InputText id="fullName" class="form-control" @bind-Value="newUser.FullName" />
                            <ValidationMessage For="@(() => newUser.FullName)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label>Email:</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="newUser.Email" />
                            <ValidationMessage For="@(() => newUser.Email)" />
                        </div>
                        <div class="form-group">
                            <label>Số điện thoại:</label>
                            <InputText id="phone" class="form-control" @bind-Value="newUser.Phone" />
                            <ValidationMessage For="@(() => newUser.Phone)" />
                        </div>
                    </div>
<hr>
                        <div class="form-section-title text-secondary fs-4">Chi tiết cá nhân</div>
                   <div class="form-row">
    <div class="form-group">
        <label>Vai trò:</label>
        <InputSelect id="roleId" class="form-control" @bind-Value="newUser.RoleId" disabled="@(isEditMode && newUser.RoleId == 1)" @onchange="OnRoleChanged">
            <option value="0">-- Chọn vai trò --</option>
            <option value="1">Admin</option>
            <option value="2">Lễ tân</option>
            <option value="3">Bác sĩ</option>
            <option value="4">Y tá</option>
            <option value="5">Kĩ Thuật</option>
        </InputSelect>
        <ValidationMessage For="@(() => newUser.RoleId)" />
    </div>
</div>

@if (newUser.RoleId == 3)
{
    <div class="form-row">
        <div class="form-group">
            <label>Chuyên khoa:</label>
            <InputText id="specialty" class="form-control" @bind-Value="newUser.Specialty" />
            <ValidationMessage For="@(() => newUser.Specialty)" />
        </div>
        <div class="form-group">
            <label>Số giấy phép:</label>
            <InputText id="licenseNumber" class="form-control" @bind-Value="newUser.LicenseNumber" />
            <ValidationMessage For="@(() => newUser.LicenseNumber)" />
        </div>
    </div>
}

                    <div class="form-group">
                        <label>Tiểu sử / Ghi chú:</label>
                        <InputTextArea id="bio" class="form-control" @bind-Value="newUser.Bio" rows="3" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelForm">Hủy</button>
                        <button type="submit" class="btn btn-primary">@(isEditMode ? "Cập nhật" : "Thêm mới")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

    <!-- Modal xác nhận xóa -->
    <NotificationModal 
        IsVisible="@showModal"
        Title="@modalTitle"
        Message="@modalMessage"
        ShowConfirmButton="true"
        OnConfirm="@ConfirmDelete"
        OnCancel="@CancelModal" />

    <!-- Danh sách người dùng -->    
    <div class="table-container">    
        <table>
            <thead>
                <tr>
                    <th>Mã Người Dùng</th>
                    <th>Tên Người Dùng</th>
                    <th>Email</th>
                    <th>Số Điện Thoại</th>
                    <th>Giới Tính</th>
                    <th>Vai Trò</th>
                    @* <th>Trạng Thái</th> *@
                    <th style="width: 220px;">Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @if (Users.Count == 0||isLoading)
                {
                    <tr>
                        <td colspan="8">Không tìm thấy người dùng nào.</td>
                    </tr>
                }
                else
                {
                    @foreach (var user in Users)
                    {
                        <tr>
                            <td>@("user"+user.UserId)</td>
                            <td>@user.FullName</td>
                            <td>@user.Email</td>
                            <td>@user.Phone</td>
                            <td>@user.Gender</td>
                            <td>@string.Join(", ", user.Roles)</td>
                             <td>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-warning" title="Sửa thông tin" @onclick="() => EditUser(user)">
                                        Sửa
                                    </button>

                                    @if (user.IsActive == true)
                                    {
                                        <button class="btn btn-sm btn-secondary" title="Vô hiệu hóa tài khoản" @onclick="() => ToggleUserStatusAsync(user)">
                                            Vô hiệu hóa
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-success" title="Kích hoạt tài khoản" @onclick="() => ToggleUserStatusAsync(user)">
                                            Kích hoạt
                                        </button>
                                    }

                                    <button class="btn btn-sm btn-danger" title="Xóa người dùng" @onclick="() => ShowDeleteConfirm(user.UserId)">
                                        Xóa
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
        <!-- Phân trang -->
        @if (totalPages > 1)
        {
            <div class="pagination">
                <button class="btn-primary" disabled="@(currentPage <= 1)" @onclick="PreviousPage">Trước</button>
                <span>Trang @currentPage / @totalPages</span>
                <button class="btn-primary" disabled="@(currentPage >= totalPages)" @onclick="NextPage">Tiếp</button>
                @* <select class="form-control page-size" @bind="pageSize" @onchange="ChangePageSize()">
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select> *@
            </div>
        }
</div>

@code {
    private HttpClient _httpClient;
    private List<UserVM> Users { get; set; } = new List<UserVM>();
    private CreateUserRequest newUser = new CreateUserRequest();
    private bool showForm = false;
    private bool isEditMode = false;
    private bool showModal = false;
    private bool isLoading = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private int userToDelete;
    private string searchQuery = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    private bool showToast = false;
    private string toastMessage = "";
    private string toastType = "info";
    private DateTime lastSearchTime = DateTime.MinValue;
    private readonly TimeSpan debounceDelay = TimeSpan.FromMilliseconds(1000);
   
    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClinicManagement_API");
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            var query = $"Admin/GetAllUsersAsync?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
            {
                query += $"&search={Uri.EscapeDataString(searchQuery)}";
            }
            Console.WriteLine($"Calling API: {query}");
            var response = await _httpClient.GetFromJsonAsync<ResponseValue<PagedResult<UserVM>>>(query);
            Console.WriteLine($"API Response Status: {response?.Status}, Items: {response?.Content?.Items?.Count}, Message: {response?.Message}");
            if (response?.Status == StatusReponse.Success && response.Content?.Items != null)
            {
                Users = response.Content.Items.ToList();
                totalItems = response.Content.TotalItems;
                totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            }
            else
            {
                ShowToast($"Không thể tải danh sách người dùng: {response?.Message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API Error: {ex.Message}");
            ShowToast($"Lỗi khi gọi API: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        if (DateTime.Now - lastSearchTime < debounceDelay)
        {
            return;
        }
        lastSearchTime = DateTime.Now;
        currentPage = 1;
        await LoadUsers();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadUsers();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadUsers();
        }
    }
    private void OnRoleChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int roleId))
        {
            Console.WriteLine($"Role changed to: {roleId}");
            newUser.RoleId = roleId;
            if (roleId != 3)
            {
                newUser.Specialty = null;
                newUser.LicenseNumber = null;
            }
            StateHasChanged(); // Cập nhật giao diện
        }
    }
    private async Task ToggleUserStatusAsync(UserVM user)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Giả định bạn có một API endpoint để thay đổi trạng thái người dùng
            // Ví dụ: PUT /api/Admin/ToggleUserStatus/{id}
            ToggleUserActiveRequest check = new ToggleUserActiveRequest();
            check.Active = !user.IsActive;
            var response = await _httpClient.PutAsJsonAsync($"Admin/toggle-active/{user.UserId}",check);

            if (response.IsSuccessStatusCode)
            {
                // Cập nhật trạng thái ngay trên giao diện mà không cần load lại toàn bộ danh sách
                user.IsActive = !user.IsActive;
                ShowToast("Cập nhật trạng thái người dùng thành công.", "success");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<dynamic>();
                ShowToast($"Cập nhật trạng thái thất bại: {error?.message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi thay đổi trạng thái: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private void ShowAddUserForm()
    {
        Console.WriteLine("ShowAddUserForm called");
        newUser = new CreateUserRequest();
        showForm = true;
        isEditMode = false;
        showToast = false;
        StateHasChanged();
    }

    private void EditUser(UserVM userRequest)
{
    Console.WriteLine($"EditUser called for ID: {userRequest.UserId}, Roles: {string.Join(", ", userRequest.Roles ?? new List<string>())}");
    newUser = new CreateUserRequest
    {
        UserId = userRequest.UserId,
        Username = userRequest.Username,
        FullName = userRequest.FullName,
        Email = userRequest.Email,
        Phone = userRequest.Phone,
        Gender = userRequest.Gender,
        Address = userRequest.Address,
        DateOfBirth = userRequest.DateOfBirth,
        RoleId = MapRolesToRoleId(userRequest.Roles),
        StaffType = userRequest.StaffType ?? null,
        Specialty = userRequest.Specialty ?? string.Empty,
        LicenseNumber = userRequest.LicenseNumber ?? string.Empty,
        Bio = userRequest.Bio ?? string.Empty
    };
    Console.WriteLine($"newUser.RoleId after mapping: {newUser.RoleId}");
    showForm = true;
    isEditMode = true;
    showToast = false;
    StateHasChanged();
}
  private int MapRolesToRoleId(List<string> roles)
    {
        if (roles == null || !roles.Any()) 
        {
            Console.WriteLine("Roles is null or empty");
            return 0; // Giá trị mặc định nếu không có vai trò
        }

        var role = roles.First().ToLower();
        Console.WriteLine($"Mapping role: {role}");
        return role switch
        {
            "admin" => 1,
            "receptionist" => 2,
            "doctor" => 3,
            "nurse" => 4,
            "technician" => 5,
            _ => 0 // Giá trị mặc định nếu không khớp
        };
    }
    private void ShowDeleteConfirm(int userId)
    {
        Console.WriteLine($"ShowDeleteConfirm called for ID: {userId}");
        userToDelete = userId;
        modalTitle = "Xác nhận xóa";
        modalMessage = $"Bạn có chắc muốn xóa người dùng với mã {userId}?";
        showModal = true;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        try
        {isLoading = true;
            StateHasChanged();
            Console.WriteLine($"Deleting user ID: {userToDelete}");
            var response = await _httpClient.DeleteAsync($"Admin/User/{userToDelete}");
            if (response.IsSuccessStatusCode)
            {
                Users.RemoveAll(u => u.UserId == userToDelete);
                ShowToast($"Đã xóa người dùng: {userToDelete}", "success");
                await LoadUsers();
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<dynamic>();
                ShowToast($"Xóa người dùng thất bại: {error?.message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xóa người dùng: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        showModal = false;
        userToDelete = 0;
        }
    }

    private void CancelModal()
    {
        Console.WriteLine("CancelModal called");
        showModal = false;
        userToDelete = 0;
        StateHasChanged();
    }

    private async Task HandleFormSubmit()
    {
        try
        {
            if (isEditMode)
            {
                Console.WriteLine($"Updating user ID: {newUser.UserId}");
                var response = await _httpClient.PutAsJsonAsync($"Admin/UpdateUser/{newUser.UserId}", newUser);
                if (response.IsSuccessStatusCode)
                {
                    var updatedUser = await response.Content.ReadFromJsonAsync<ResponseValue<CreateUserRequest>>();
                    if (updatedUser?.Status == StatusReponse.Success && updatedUser.Content != null)
                    {
                        var existingUser = Users.FirstOrDefault(m => m.UserId == newUser.UserId);
                        if (existingUser != null)
                        {
                            existingUser.Username = updatedUser.Content.Username;
                            existingUser.FullName = updatedUser.Content.FullName;
                            existingUser.Email = updatedUser.Content.Email;
                            existingUser.Phone = updatedUser.Content.Phone;
                            existingUser.Gender = updatedUser.Content.Gender;
                            existingUser.Address = updatedUser.Content.Address;
                            existingUser.DateOfBirth = updatedUser.Content.DateOfBirth;
                            existingUser.Specialty = updatedUser.Content.Specialty;
                            existingUser.LicenseNumber = updatedUser.Content.LicenseNumber;
                            existingUser.StaffType = updatedUser.Content.StaffType;
                            existingUser.Bio = updatedUser.Content.Bio;
    @* existingUser.Roles = new List<string> { newUser.RoleId switch
    {
    2 => "receptionist",
    3 => "doctor",
    4 => "nurse",
    5 => "technician",
    _ => "Unknown"
    }
    }; *@
                            
                        }
                        ShowToast($"Đã cập nhật người dùng: {newUser.UserId}", "success");
                        showForm = false;
                        newUser = new CreateUserRequest();
                    }
                    else
                    {
                        ShowToast($"Cập nhật người dùng thất bại: {updatedUser?.Message ?? "Lỗi không xác định"}", "error");
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error Response: {errorContent}");
                    try
                    {
                        var error = await response.Content.ReadFromJsonAsync<ResponseValue<object>>();
                        ShowToast($"Cập nhật người dùng thất bại: {error?.Message ?? "Lỗi không xác định"}", "error");
                    }
                    catch
                    {
                        ShowToast($"Cập nhật người dùng thất bại: {errorContent}", "error");
                    }
                  
                }
            }
            else
            {
                newUser.StaffType= newUser.RoleId switch
                {
                    2 => "Lễ tân",
                    3 => "Bác sĩ",
                    4 => "Y tá",
                    5 => "Kĩ Thuật",
                    _ => null
                };
                Console.WriteLine($"Creating new user: {JsonSerializer.Serialize(newUser)}");
                var response = await _httpClient.PostAsJsonAsync("Admin/CreateUser", newUser);
                if (response.IsSuccessStatusCode)
                {
                    var addedUser = await response.Content.ReadFromJsonAsync<ResponseValue<UserVM>>();
                    if (addedUser?.Status == StatusReponse.Success && addedUser.Content != null)
                    {
                        Users.Add(addedUser.Content);
                        ShowToast($"Đã thêm người dùng: {newUser.Username}", "success");
                        showForm = false;
                        newUser = new CreateUserRequest();
                    }
                    else
                    {
                        ShowToast($"Thêm người dùng thất bại: {addedUser?.Message ?? "Lỗi không xác định"}", "error");
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error Response: {errorContent}");
                    try
                    {
                        var error = await response.Content.ReadFromJsonAsync<ResponseValue<object>>();
                        ShowToast($"Thêm người dùng thất bại: {error?.Message ?? "Lỗi không xác định"}", "error");
                    }
                    catch
                    {
                        ShowToast($"Thêm người dùng thất bại: {errorContent}", "error");
                    }
                    
                }
            }
            await LoadUsers();
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xử lý người dùng: {ex.Message}", "error");
        }
        StateHasChanged();
    }

    private void CancelForm()
    {
        Console.WriteLine("CancelForm called");
        showForm = false;
        newUser = new CreateUserRequest();
        showToast = false;
        StateHasChanged();
    }

    private void ShowToast(string message, string type)
    {
        Console.WriteLine($"ShowToast: {message}, Type: {type}");
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
    }

    private async Task HideToast()
    {
        Console.WriteLine("HideToast called");
        showToast = false;
        toastMessage = "";
        toastType = "info";
        StateHasChanged();
    }

    // Custom Validation Attribute cho tuổi tối thiểu
    public class MinimumAgeAttribute : ValidationAttribute
    {
        private readonly int _minimumAge;

        public MinimumAgeAttribute(int minimumAge)
        {
            _minimumAge = minimumAge;
        }

        public override string FormatErrorMessage(string name)
        {
            return $"Người dùng phải ít nhất {_minimumAge} tuổi.";
        }

        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value is DateOnly date)
            {
                var currentDate = new DateOnly(2025, 10, 7); // Ngày hiện tại theo yêu cầu
                var age = currentDate.Year - date.Year;
                if (date > currentDate.AddYears(-age)) age--;
                if (age < _minimumAge)
                {
                    return new ValidationResult(FormatErrorMessage(validationContext.DisplayName));
                }
            }
            return ValidationResult.Success;
        }
    }

   
}