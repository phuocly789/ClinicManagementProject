@page "/admin/users"
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using System.Web
@using System.Text
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
<PageTitle>Quản Lý người dùng</PageTitle>
<Loading IsLoading="@isLoading" />
<div class="main-content">
    <header class="header">
        <h1>Quản Lý Danh Mục người dùng</h1>
        <div>
            <input
                type="text"
                class="form-control"
                placeholder="Tìm kiếm người dùng..."
                @bind="searchQuery"
                @oninput="OnSearchInput" />
            <button
                style="width: 400px;"
                class="btn-primary"
                @onclick="ShowAddUserForm">
                Thêm người dùng Mới
            </button>
        </div>
    </header>
    <!-- Toast thông báo -->
    <ToastNotification
        IsVisible="@showToast"
        Message="@toastMessage"
        ToastType="@toastType"
        OnClose="@HideToast" />
    <!-- Modal form thêm/sửa người dùng -->
    @if (showForm)
    {
        <div class="modal-overlay">
            <div class="modal">
                <div class="modal-header">
                    <h3>
                        @(isEditMode ? "Sửa thông tin người dùng" : "Thêm người dùng mới")
                    </h3>
                    <button class="close-button bg-secondary border-0" @onclick="CancelForm">
                        &times;
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newUser" OnValidSubmit="@HandleFormSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-section-title text-secondary fs-4">Thông tin cơ bản</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Tên đăng nhập:</label>
                                <InputText
                                    id="username"
                                    class="form-control"
                                    @bind-Value="newUser.Username" />
                                <ValidationMessage For="@(() => newUser.Username)" />
                            </div>
                            <div class="form-group">
                                <label>Họ và tên:</label>
                                <InputText
                                    id="fullName"
                                    class="form-control"
                                    @bind-Value="newUser.FullName" />
                                <ValidationMessage For="@(() => newUser.FullName)" />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Email:</label>
                                <InputText
                                    id="email"
                                    type="email"
                                    class="form-control"
                                    @bind-Value="newUser.Email" />
                                <ValidationMessage For="@(() => newUser.Email)" />
                            </div>
                            <div class="form-group">
                                <label>Số điện thoại:</label>
                                <InputText
                                    id="phone"
                                    class="form-control"
                                    @bind-Value="newUser.Phone" />
                                <ValidationMessage For="@(() => newUser.Phone)" />
                            </div>
                        </div>
                        <hr>
                        <div class="form-section-title text-secondary fs-4">Chi tiết cá nhân</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Vai trò:</label>
                                <InputSelect
                                    id="roleId"
                                    class="form-control"
                                    @bind-Value="newUser.RoleId"
                                    disabled="@(isEditMode && newUser.RoleId == 1 || isEditMode && newUser.RoleId == 6)"
                                    @onchange="OnRoleChanged">
                                    <option value="0">-- Chọn vai trò --</option>
                                    <option value="1">Admin</option>
                                    <option value="2">Lễ tân</option>
                                    <option value="3">Bác sĩ</option>
                                    <option value="4">Y tá</option>
                                    <option value="5">Kĩ thuật</option>
                                    <option value="6">Bệnh nhân</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newUser.RoleId)" />
                            </div>
                        </div>
                        @if (newUser.RoleId == 3)
                        {
                            <div class="form-row">
                                <div class="form-group">
                                    <label>Chuyên khoa:</label>
                                    <InputText
                                        id="specialty"
                                        class="form-control"
                                        @bind-Value="newUser.Specialty" />
                                    <ValidationMessage For="@(() => newUser.Specialty)" />
                                </div>
                                <div class="form-group">
                                    <label>Số giấy phép:</label>
                                    <InputText
                                        id="licenseNumber"
                                        class="form-control"
                                        @bind-Value="newUser.LicenseNumber" />
                                    <ValidationMessage For="@(() => newUser.LicenseNumber)" />
                                </div>
                            </div>
                        }
                        <div class="form-group">
                            <label>Tiểu sử / Ghi chú:</label>
                            <InputTextArea
                                id="bio"
                                class="form-control"
                                @bind-Value="newUser.Bio"
                                rows="3" />
                        </div>
                        <div class="modal-footer">
                            <button
                                type="button"
                                class="btn btn-secondary"
                                @onclick="CancelForm">
                                Hủy
                            </button>
                            <button type="submit" class="btn btn-primary">
                                @(isEditMode ? "Cập nhật" : "Thêm mới")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    <!-- Modal xác nhận xóa -->
    <NotificationModal
        IsVisible="@showModal"
        Title="@modalTitle"
        Message="@modalMessage"
        ShowConfirmButton="@(isDeleteConfirm || isToggleConfirm)"
        OnConfirm="@ConfirmAction"
        OnCancel="@CancelModal" />
    <!-- Danh sách người dùng -->
    <div class="table-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width: 150px;">Mã Người Dùng</th>
                    <th style="width: 200px;">Tên Người Dùng</th>
                    <th>Email</th>
                    <th style="width: 150px;">Số Điện Thoại</th>
                    <th style="width: 120px;">Giới Tính</th>
                    <th style="width: 120px;">Vai Trò</th>
                    <th style="width: 120px;">Trạng Thái</th>
                    <th style="width: 220px;">Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @if (Users.Count == 0 || isLoading)
                {
                    <tr>
                        <td colspan="8">Không tìm thấy người dùng nào.</td>
                    </tr>
                }
                else
                {
                    @foreach (var user in Users)
                    {
                        <tr>
                            <td>@("user" + user.UserId)</td>
                            <td>@user.FullName</td>
                            <td>@user.Email</td>
                            <td>@user.Phone</td>
                            <td>@user.Gender</td>
                            <td>@string.Join(", ", user.Roles)</td>
                            @if (user.IsActive.HasValue)
                            {
                                <td>
                                    @if (user.IsActive??true)
                                    {
                                        <span class="status status-active">Kích hoạt</span>
                                    }
                                    else
                                    {
                                        <span class="status status-inactive">Vô hiệu hóa</span>
                                    }
                                </td>
                            }
                            else
                            {
                                <td></td>
                            }
                            <td>
                                <div class="btn-group" role="group">
                                    <button
                                        class="btn btn-sm"
                                        title="Xem chi tiết"
                                        @onclick="() => ShowUserDetails(user)">
                                        <lord-icon
                                            src="https://cdn.lordicon.com/knitbwfa.json"
                                            trigger="hover"
                                            style="width:30px;height:30px">
                                        </lord-icon>
                                            
                                    </button>
                                    
                                    <button
                                        class="btn btn-sm "
                                        title="Sửa thông tin"
                                        @onclick="() => EditUser(user)">
                                        <lord-icon
                                            src="https://cdn.lordicon.com/vwzukuhn.json"
                                            trigger="hover"
                                            style="width:30px;height:30px">
                                        </lord-icon>
                                    </button>
                                    <button class="btn btn-sm" title="Xóa người dùng" @onclick="() => ShowDeleteConfirm(user)">
                                        <lord-icon src="https://cdn.lordicon.com/sxhqklqh.json" trigger="hover"
                                            style="width:30px;height:30px">
                                        </lord-icon>
                                    </button>
                                    @if (user.IsActive == true)
                                    {
                                        <button
                                            class="btn btn-sm "
                                            title="Vô hiệu hóa tài khoản"
                                            @onclick="() => ShowToggleConfirm(user)">
                                           
                                         <lord-icon
                                            src="https://cdn.lordicon.com/rnbuzxxk.json"
                                            trigger="hover"
                                            style="width:30px;height:30px">
                                        </lord-icon>
                                        </button>
                                    }
                                    else
                                    {
                                        <button
                                            class="btn btn-sm"
                                            title="Kích hoạt tài khoản"
                                            @onclick="() => ShowToggleConfirm(user)">
                                            <lord-icon src="https://cdn.lordicon.com/pilfbsjh.json" trigger="hover"
                                                style="width:30px;height:30px">
                                            </lord-icon>
                                        </button>
                                    }
                                   
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <!-- Phân trang -->
 @if (totalPages > 1)
    {
        <div class="pagination">
            <button class="btn btn-primary" disabled="@(currentPage <= 1)" @onclick="PreviousPage">Trước</button>
            <span>Trang @currentPage / @totalPages</span>
            <button class="btn btn-primary" disabled="@(currentPage >= totalPages)" @onclick="NextPage">Tiếp</button>
        </div>
    }
</div>

@code {
    private HttpClient _httpClient;
    private List<UserVM> Users { get; set; } = new List<UserVM>();
    private CreateUserRequest newUser = new CreateUserRequest();
    private bool showForm = false;
    private bool isEditMode = false;
    private bool showModal = false;
    private bool isLoading = false;
    private bool isDetailView = false;
    private int userToToggle = 0;
    private bool? toggleToActive = false;
    private bool isDeleteConfirm = false;
    private bool isToggleConfirm = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private int userToDelete;
    private string searchQuery = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    private bool showToast = false;
    private string toastMessage = "";
    private string toastType = "info";
    private DateTime lastSearchTime = DateTime.MinValue;
    private readonly TimeSpan debounceDelay = TimeSpan.FromMilliseconds(1000);

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClinicManagement_API");
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            var query = $"Admin/GetAllUsersAsync?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
            {
                query += $"&search={Uri.EscapeDataString(searchQuery)}";
            }
            Console.WriteLine($"Calling API: {query}");
            var response = await _httpClient.GetFromJsonAsync<ResponseValue<PagedResult<UserVM>>>(query);
            Console.WriteLine($"API Response Status: {response?.Status}, Items: {response?.Content?.Items?.Count}, Message: {response?.Message}");
            if (response?.Status == StatusReponse.Success && response.Content?.Items != null)
            {
                Users = response.Content.Items.ToList();
                totalItems = response.Content.TotalItems;
                totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            }
            else
            {
                ShowToast($"Không thể tải danh sách người dùng: {response?.Message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API Error: {ex.Message}");
            ShowToast($"Lỗi khi gọi API: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        if (DateTime.Now - lastSearchTime < debounceDelay)
        {
            return;
        }
        lastSearchTime = DateTime.Now;
        currentPage = 1;
        await LoadUsers();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadUsers();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadUsers();
        }
    }

    private void OnRoleChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int roleId))
        {
            Console.WriteLine($"Role changed to: {roleId}");
            newUser.RoleId = roleId;
            if (roleId != 3)
            {
                newUser.Specialty = null;
                newUser.LicenseNumber = null;
            }
            StateHasChanged();
        }
    }

    private void ShowAddUserForm()
    {
        Console.WriteLine("ShowAddUserForm called");
        newUser = new CreateUserRequest();
        showForm = true;
        isEditMode = false;
        showToast = false;
        StateHasChanged();
    }

    private void EditUser(UserVM userRequest)
    {
        Console.WriteLine($"EditUser called for ID: {userRequest.UserId}, Roles: {string.Join(", ", userRequest.Roles ?? new List<string>())}");
        newUser = new CreateUserRequest
        {
            UserId = userRequest.UserId,
            Username = userRequest.Username,
            FullName = userRequest.FullName,
            Email = userRequest.Email,
            Phone = userRequest.Phone,
            Gender = userRequest.Gender,
            Address = userRequest.Address,
            DateOfBirth = userRequest.DateOfBirth,
            RoleId = MapRolesToRoleId(userRequest.Roles),
            StaffType = userRequest.StaffType ?? null,
            Specialty = userRequest.Specialty ?? string.Empty,
            LicenseNumber = userRequest.LicenseNumber ?? string.Empty,
            Bio = userRequest.Bio ?? string.Empty
        };
        Console.WriteLine($"newUser.RoleId after mapping: {newUser.RoleId}");
        showForm = true;
        isEditMode = true;
        showToast = false;
        StateHasChanged();
    }

    private int MapRolesToRoleId(List<string> roles)
    {
        if (roles == null || !roles.Any())
        {
            Console.WriteLine("Roles is null or empty");
            return 0;
        }

        var role = roles.First().ToLower();
        Console.WriteLine($"Mapping role: {role}");
        return role switch
        {
            "admin" => 1,
            "receptionist" => 2,
            "doctor" => 3,
            "nurse" => 4,
            "technician" => 5,
            "patient" => 6,
            _ => 0
        };
    }

    private void AppendInfoRow(StringBuilder sb, string label, string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            sb.AppendLine("<div class=\"info-row\">");
            sb.AppendLine($"    <span class=\"info-label\">{label}</span>");
            sb.AppendLine($"    <span class=\"info-value\">{HttpUtility.HtmlEncode(value)}</span>");
            sb.AppendLine("</div>");
        }
    }

    private void ShowUserDetails(UserVM user)
    {
        Console.WriteLine($"ShowUserDetails called for ID: {user.UserId}");
        modalTitle = $"Chi tiết người dùng: {user.FullName}";
        var sb = new StringBuilder();
        sb.AppendLine("<div class=\"card-body\">");

        AppendInfoRow(sb, "Mã người dùng", $"user{user.UserId}");
        AppendInfoRow(sb, "Tên đăng nhập", user.Username);
        AppendInfoRow(sb, "Họ và tên", user.FullName);
        AppendInfoRow(sb, "Email", user.Email);
        AppendInfoRow(sb, "Số điện thoại", user.Phone);
        AppendInfoRow(sb, "Giới tính", user.Gender);

        if (user.Roles != null && user.Roles.Any())
        {
            AppendInfoRow(sb, "Vai trò", string.Join(", ", user.Roles));
        }

        if (user.IsActive.HasValue)
        {
            string status = user.IsActive.Value ? "Kích hoạt" : "Vô hiệu hóa";
            string statusClass = user.IsActive.Value ? "status-active" : "status-inactive";
            sb.AppendLine("<div class=\"info-row\">");
            sb.AppendLine("    <span class=\"info-label\">Trạng thái</span>");
            sb.AppendLine($"    <span class=\"info-value\"><span class=\"{statusClass}\">{status}</span></span>");
            sb.AppendLine("</div>");
        }

        AppendInfoRow(sb, "Chuyên khoa", user.Specialty);
        AppendInfoRow(sb, "Số giấy phép", user.LicenseNumber);
        AppendInfoRow(sb, "Địa chỉ", user.Address);

        if (user.DateOfBirth.HasValue)
        {
            AppendInfoRow(sb, "Ngày sinh", user.DateOfBirth.Value.ToString("dd/MM/yyyy"));
        }

        AppendInfoRow(sb, "Tiểu sử/Ghi chú", user.Bio);

        sb.AppendLine("</div>");
        modalMessage = sb.ToString();
        isDetailView = true;
        isDeleteConfirm = false;
        isToggleConfirm = false;
        showModal = true;
        StateHasChanged();
    }

    private void ShowToggleConfirm(UserVM user)
    {
        userToToggle = user.UserId;
        toggleToActive = !user.IsActive;
        string action = (toggleToActive ?? false) ? "kích hoạt" : "vô hiệu hóa";
        modalMessage = $"Bạn có chắc muốn {action} người dùng {user.FullName}?";
        modalTitle = "Xác nhận thay đổi trạng thái";
        isToggleConfirm = true;
        isDeleteConfirm = false;
        showModal = true;
        StateHasChanged();
    }

    private void ShowDeleteConfirm(UserVM user)
    {
        Console.WriteLine($"ShowDeleteConfirm called for ID: {user.UserId}");
        userToDelete = user.UserId;
        modalTitle = "Xác nhận xóa";
        modalMessage = $"Bạn có chắc muốn xóa người dùng với mã {user.FullName}?";
        showModal = true;
        isDeleteConfirm = true;
        isToggleConfirm = false;
        StateHasChanged();
    }

    private async Task ConfirmAction()
    {
        showModal = false;
        isLoading = true;
        StateHasChanged();

        try
        {
            if (isDeleteConfirm)
            {
                Console.WriteLine($"Deleting user ID: {userToDelete}");
                var response = await _httpClient.DeleteAsync($"Admin/User/{userToDelete}");
                if (response.IsSuccessStatusCode)
                {
                    ShowToast($"Đã xóa người dùng: {userToDelete}", "success");
                    await LoadUsers();
                }
                else
                {
                    var error = await response.Content.ReadFromJsonAsync<dynamic>();
                    ShowToast($"Xóa người dùng thất bại: {error?.message ?? "Lỗi không xác định"}", "error");
                }
                userToDelete = 0;
                isDeleteConfirm = false;
            }
            else if (isToggleConfirm)
            {
                var req = new ToggleUserActiveRequest { Active = toggleToActive };
                var response = await _httpClient.PutAsJsonAsync($"Admin/toggle-active/{userToToggle}", req);
                if (response.IsSuccessStatusCode)
                {
                    var user = Users.FirstOrDefault(u => u.UserId == userToToggle);
                    if (user != null)
                    {
                        user.IsActive = toggleToActive;
                    }
                    string action = (toggleToActive ?? false) ? "kích hoạt" : "vô hiệu hóa";
                    ShowToast($"Đã {action} tài khoản người dùng thành công.", "success");
                }
                else
                {
                    var error = await response.Content.ReadFromJsonAsync<dynamic>();
                    string action = (toggleToActive ?? false) ? "Kích hoạt" : "Vô hiệu hóa";
                    ShowToast($"{action} tài khoản thất bại: {error?.message ?? "Lỗi không xác định"}", "error");
                }
                userToToggle = 0;
                toggleToActive = false;
                isToggleConfirm = false;
            }
        }
        catch (Exception ex)
        {
            string action = isToggleConfirm ? ((toggleToActive ?? false) ? "kích hoạt" : "vô hiệu hóa") : "xóa";
            ShowToast($"Lỗi khi {action} : {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            isDeleteConfirm = false;
            isToggleConfirm = false;
            StateHasChanged();
        }
    }

    private void CancelModal()
    {
        Console.WriteLine("CancelModal called");
        showModal = false;
        userToDelete = 0;
        isDeleteConfirm = false;
        isToggleConfirm = false;
        isDetailView = false;
        userToToggle = 0;
        toggleToActive = false;
        StateHasChanged();
    }

    private async Task HandleFormSubmit()
    {
        try
        {
            if (isEditMode)
            {
                Console.WriteLine($"Updating user ID: {newUser.UserId}");
                var response = await _httpClient.PutAsJsonAsync($"Admin/UpdateUser/{newUser.UserId}", newUser);
                if (response.IsSuccessStatusCode)
                {
                    var updatedUser = await response.Content.ReadFromJsonAsync<ResponseValue<CreateUserRequest>>();
                    if (updatedUser?.Status == StatusReponse.Success && updatedUser.Content != null)
                    {
                        var existingUser = Users.FirstOrDefault(m => m.UserId == newUser.UserId);
                        if (existingUser != null)
                        {
                            existingUser.Username = updatedUser.Content.Username;
                            existingUser.FullName = updatedUser.Content.FullName;
                            existingUser.Email = updatedUser.Content.Email;
                            existingUser.Phone = updatedUser.Content.Phone;
                            existingUser.Gender = updatedUser.Content.Gender;
                            existingUser.Address = updatedUser.Content.Address;
                            existingUser.DateOfBirth = updatedUser.Content.DateOfBirth;
                            existingUser.Specialty = updatedUser.Content.Specialty;
                            existingUser.LicenseNumber = updatedUser.Content.LicenseNumber;
                            existingUser.StaffType = updatedUser.Content.StaffType;
                            existingUser.Bio = updatedUser.Content.Bio;
                            existingUser.Roles = new List<string> { newUser.RoleId switch
                            {
                                1 => "admin",
                                2 => "receptionist",
                                3 => "doctor",
                                4 => "nurse",
                                5 => "technician",
                                6 => "patient",
                                _ => "Unknown"
                            }};
                        }
                        ShowToast($"Đã cập nhật người dùng: {newUser.UserId}", "success");
                        showForm = false;
                        newUser = new CreateUserRequest();
                    }
                    else
                    {
                        ShowToast($"Cập nhật người dùng thất bại: {updatedUser?.Message ?? "Lỗi không xác định"}", "error");
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error Response: {errorContent}");
                    try
                    {
                        var error = await response.Content.ReadFromJsonAsync<ResponseValue<object>>();
                        ShowToast($"Cập nhật người dùng thất bại: {error?.Message ?? "Lỗi không xác định"}", "error");
                    }
                    catch
                    {
                        ShowToast($"Cập nhật người dùng thất bại: {errorContent}", "error");
                    }
                }
            }
            else
            {
                newUser.StaffType = newUser.RoleId switch
                {
                    2 => "Lễ tân",
                    3 => "Bác sĩ",
                    4 => "Y tá",
                    5 => "Kĩ thuật",
                    _ => null
                };
                Console.WriteLine($"Creating new user: {JsonSerializer.Serialize(newUser)}");
                var response = await _httpClient.PostAsJsonAsync("Admin/CreateUser", newUser);
                if (response.IsSuccessStatusCode)
                {
                    var addedUser = await response.Content.ReadFromJsonAsync<ResponseValue<UserVM>>();
                    if (addedUser?.Status == StatusReponse.Success && addedUser.Content != null)
                    {
                        Users.Add(addedUser.Content);
                        ShowToast($"Đã thêm người dùng: {newUser.Username}", "success");
                        showForm = false;
                        newUser = new CreateUserRequest();
                    }
                    else
                    {
                        ShowToast($"Thêm người dùng thất bại: {addedUser?.Message ?? "Lỗi không xác định"}", "error");
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error Response: {errorContent}");
                    try
                    {
                        var error = await response.Content.ReadFromJsonAsync<ResponseValue<object>>();
                        ShowToast($"Thêm người dùng thất bại: {error?.Message ?? "Lỗi không xác định"}", "error");
                    }
                    catch
                    {
                        ShowToast($"Thêm người dùng thất bại: {errorContent}", "error");
                    }
                }
            }
            await LoadUsers();
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xử lý người dùng: {ex.Message}", "error");
        }
        StateHasChanged();
    }

    private void CancelForm()
    {
        Console.WriteLine("CancelForm called");
        showForm = false;
        newUser = new CreateUserRequest();
        showToast = false;
        StateHasChanged();
    }

    private void ShowToast(string message, string type)
    {
        Console.WriteLine($"ShowToast: {message}, Type: {type}");
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
    }

    private async Task HideToast()
    {
        Console.WriteLine("HideToast called");
        showToast = false;
        toastMessage = "";
        toastType = "info";
        StateHasChanged();
    }

    public class MinimumAgeAttribute : ValidationAttribute
    {
        private readonly int _minimumAge;

        public MinimumAgeAttribute(int minimumAge)
        {
            _minimumAge = minimumAge;
        }

        public override string FormatErrorMessage(string name)
        {
            return $"Người dùng phải ít nhất {_minimumAge} tuổi.";
        }

        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value is DateOnly date)
            {
                var currentDate = new DateOnly(2025, 10, 7);
                var age = currentDate.Year - date.Year;
                if (date > currentDate.AddYears(-age)) age--;
                if (age < _minimumAge)
                {
                    return new ValidationResult(FormatErrorMessage(validationContext.DisplayName));
                }
            }
            return ValidationResult.Success;
        }
    }
}