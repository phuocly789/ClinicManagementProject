@page "/admin/dashboard"
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Dashboard</PageTitle>

<Loading IsLoading="@isLoading" />

<div class="main-content">
    <header class="header">
        <h1>Dashboard Tổng Quan</h1>
        <div class="date-range-picker">
            <label for="startDate">Từ ngày:</label>
            <InputDate id="startDate" class="form-control" @bind-Value="startDate" />
            <label for="endDate">Đến ngày:</label>
            <InputDate id="endDate" class="form-control" @bind-Value="endDate" />
            <button class="btn-primary" style="width: 400px;" @onclick="LoadRevenueChartData" disabled="@isLoading">Xem
                báo cáo</button>
        </div>
    </header>

    <div class="stat-cards-container">
        <StatCard Title="Doanh Thu(VND)" Value="@(totalRevenue.ToString("N0") + " VND")" Icon="fa-solid fa-sack-dollar"
            Color="primary" />
        <StatCard Title="Đã Khám" Value="@stats?.CompletedAppointmentsToday.ToString("N0")"
            Icon="fa-solid fa-user-check" Color="success" />
        <StatCard Title="Hóa Đơn Chờ" Value="@stats?.PendingInvoicesCount.ToString("N0")"
            Icon="fa-solid fa-file-invoice-dollar" Color="danger" />
        <StatCard Title="Lịch Hẹn Hôm Nay" Value="@stats?.TotalAppointmentsToday.ToString("N0")"
            Icon="fa-solid fa-calendar-check" Color="info" />
    </div>

    <div class="dashboard-row">
        <div class=" chart-container card">
            <div class="card-header">
                <h3>Biểu Đồ Doanh Thu</h3>
            </div>
            <div class="card-body">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>

        <div class="inventory-warnings-container card">
            <div class="card-header">
                <h3>Cảnh Báo Tồn Kho (Dưới 200)</h3>
            </div>
            <div class="card-body">
                @if (lowStockMedicines == null)
                {
                    <p>Đang tải...</p>
                }
                else if (!lowStockMedicines.Any())
                {
                    <p>Không có cảnh báo tồn kho.</p>
                }
                else
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Tên Thuốc</th>
                                <th class="text-end">Số Lượng</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var med in lowStockMedicines)
                            {
                                <tr>
                                    <td>@med.MedicineName</td>
                                    <td class="text-end text-danger fw-bold">@med.StockQuantity @med.Unit</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private HttpClient _httpClient;
    private bool isLoading = true;

    // Data for UI
    private DashboardStatisticsDTO stats;
    private Decimal totalRevenue = 0;
    private List<LowStockMedicineDTO> lowStockMedicines;
    private DateTime? startDate = DateTime.Now.AddDays(-6);
    private DateTime? endDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClinicManagement_API");
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        isLoading = true;

        var statsTask = LoadStatistics();
        var inventoryTask = LoadInventoryWarnings();

        await Task.WhenAll(statsTask, inventoryTask);

        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadStatistics()
    {
        try
        {
            string from = startDate?.ToString("MM-dd-yyyy");
            string to = endDate?.ToString("MM-dd-yyyy");
            var response = await
            _httpClient.GetFromJsonAsync<ResponseValue<DashboardStatisticsDTO>>($"Reports/GetDashBoardStaticAsync?startDate={from}&endDate={to}");
            Console.WriteLine($"API Response Status: {response?.Status}");
            Console.WriteLine($"API Response Content: {System.Text.Json.JsonSerializer.Serialize(response?.Content)}");
            if (response?.Status == StatusReponse.Success)
            {
                stats = response.Content;
                Console.WriteLine(response);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi tải thống kê: {ex.Message}");
        }
    }

    private async Task LoadInventoryWarnings()
    {
        try
        {
            var response = await
            _httpClient.GetFromJsonAsync<ResponseValue<List<LowStockMedicineDTO>>>("Medicine/Inventory-Warnings?threshold=200");
            if (response?.Status == StatusReponse.Success)
            {
                lowStockMedicines = response.Content;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi tải cảnh báo tồn kho: {ex.Message}");
        }
    }

    private async Task LoadRevenueChartData()
    {
        try
        {
            isLoading = true;

            string from = startDate?.ToString("yyyy-MM-dd");
            string to = endDate?.ToString("yyyy-MM-dd");
            var apiUrl = $"Reports/GetRevenueStatistics?startDate={from}&endDate={to}";
            Console.WriteLine($"Calling API: {apiUrl}");

            var response = await _httpClient.GetFromJsonAsync<ResponseValue<RevenueReportDTO>>(apiUrl);
            Console.WriteLine($"API Response Status: {response?.Status}");
            Console.WriteLine($"API Response Content: {System.Text.Json.JsonSerializer.Serialize(response?.Content)}");

            if (response?.Status == StatusReponse.Success && response.Content?.ByDate != null)
            {
                var labels = response.Content.ByDate.Select(d => d.Date).ToArray();
                var data = response.Content.ByDate.Select(d => d.Revenue).ToArray();
                Console.WriteLine($"Labels: {string.Join(", ", labels)}");
                Console.WriteLine($"Data: {string.Join(", ", data)}");
                totalRevenue = response.Content.TotalRevenue;
                await JSRuntime.InvokeVoidAsync("updateChart", "revenueChart", labels, data);
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("No data or invalid response from API.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi tải dữ liệu biểu đồ: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeChart", "revenueChart");
            await LoadRevenueChartData();
        }
    }
}