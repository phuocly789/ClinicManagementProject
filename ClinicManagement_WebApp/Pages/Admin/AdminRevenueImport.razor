@page "/admin/revenue-report"
@using System.Text.Json
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
<PageTitle>Báo Cáo Doanh Thu</PageTitle>

<Loading IsLoading="@isLoading" />

<div class="main-content">
    <header class="header">
        <h1>Báo Cáo Doanh Thu</h1>
        <div style="width: 400px;">
            <input type="text" style="width: 400px;" class="form-control" placeholder="Tìm kiếm hóa đơn (tên bệnh nhân)" @bind="searchQuery" @oninput="OnSearchInput" />
        </div>
    </header>

    <!-- Toast thông báo -->
    <ToastNotification 
        IsVisible="@showToast"
        Message="@toastMessage"
        ToastType="@toastType"
        OnClose="@HideToast" />

    <!-- Bộ lọc -->
    <div class="filter-container mb-3">
        <div class="row">
            <div class="col-md-3">
                <label>Từ ngày:</label>
                <InputDate class="form-control" @bind-Value="filter.StartDate" />
            </div>
            <div class="col-md-3">
                <label>Đến ngày:</label>
                <InputDate class="form-control" @bind-Value="filter.EndDate" />
            </div>
            <div class="col-md-6 align-self-end d-flex justify-content-end">
                <button class="btn btn-primary me-2" @onclick="ApplyFilter">Lọc</button>
                <button class="btn btn-secondary" @onclick="ExportToCsv">Xuất CSV</button>
            </div>
        </div>
    </div>

    <!-- Bảng danh sách hóa đơn -->
    <div class="table-container" style="max-height: 65vh;">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width: 135px;">Mã Hóa Đơn</th>
                    <th style="width: 150px;">Ngày Hóa Đơn</th>
                    <th style="width: 220px;">Bệnh Nhân</th>
                    <th style="width: 180px;">Tổng Cộng</th>
                    <th style="width: 150px;">Ngày Cuộc Hẹn</th>
                    <th style="width: 110px;">Trạng Thái</th>
                    <th style="width: 110px;">Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @if (Invoices.Count == 0 && !isLoading)
                {
                    <tr><td colspan="6">Không tìm thấy hóa đơn nào.</td></tr>
                }
                else
                {
                    @foreach (var item in Invoices)
                    {
                        <tr>
                            <td>@("INV" + item.InvoiceId)</td>
                            <td>@item.InvoiceDate.ToString("dd/MM/yyyy")</td>
                            <td>@item.PatientName</td>
                            <td>@item.TotalAmount.ToString("N0") VNĐ</td>
                            <td>@(item.AppointmentDate?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                            <td>
                                @if (item.Status == "Paid")
                                {
                                    <span class="status status-active">Thành Công</span>
                                }
                                else if(item.Status == "Pending")
                                {
                                    <span class="status status-pending">Chờ Thanh Toán</span>
                                }
                                else
                                {
                                    <span class="status status-inactive">Đã Hủy</span>
                                }
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm" title="Xem chi tiết" @onclick="() => ViewInvoiceDetails(item)">
                                    <lord-icon src="https://cdn.lordicon.com/knitbwfa.json" trigger="hover"
                                        style="width:30px;height:30px">
                                    </lord-icon>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Phân trang -->
    @if (totalPages > 1)
    {
        <div class="pagination">
            <button class="btn btn-primary" disabled="@(currentPage <= 1)" @onclick="PreviousPage">Trước</button>
            <span>Trang @currentPage / @totalPages</span>
            <button class="btn btn-primary" disabled="@(currentPage >= totalPages)" @onclick="NextPage">Tiếp</button>
        </div>
    }

    <!-- Modal xem chi tiết -->
    @if (showDetailModal)
    {
        <div class="modal-overlay">
            <div class="modal">
                <div class="modal-header">
                    <h3>Chi Tiết Hóa Đơn #INV+@currentDetail.InvoiceId</h3>
                    <button class="close-button bg-secondary border-0" @onclick="() => showDetailModal = false">&times;</button>
                </div>
                <div class="modal-body">
                    <p><strong>Bệnh nhân:</strong> @currentDetail.PatientName</p>
                    <p><strong>Ngày hóa đơn:</strong> @currentDetail.InvoiceDate.ToString("dd/MM/yyyy")</p>
                    <p><strong>Ngày cuộc hẹn:</strong> @(currentDetail.AppointmentDate?.ToString("dd/MM/yyyy") ?? "N/A")</p>
                    <p><strong>Tổng:</strong> @currentDetail.TotalAmount.ToString("N0") VNĐ</p>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Loại</th>
                                <th>Tên</th>
                                <th>Số lượng</th>
                                <th>Đơn giá</th>
                                <th>Tổng tiền</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DetailedInvoiceItemDTO d in currentDetail.Details)
                            {
                                <tr>
                                    <td>@(d.ServiceId.HasValue ? "Dịch vụ" : "Thuốc")</td>
                                    <td>@(d.ServiceName ?? d.MedicineName ?? "N/A")</td>
                                    <td>@d.Quantity</td>
                                    <td>@d.UnitPrice.ToString("N0") VNĐ</td>
                                    <td>@d.SubTotal.ToString("N0") VNĐ</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showDetailModal = false">Đóng</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HttpClient _httpClient;
    private List<DetailedInvoiceDTO> Invoices { get; set; } = new List<DetailedInvoiceDTO>();
    private bool isLoading = false;
    private string searchQuery = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    private bool showToast = false;
    private string toastMessage = "";
    private string toastType = "info";
    private bool showDetailModal = false;
    private DetailedInvoiceDTO currentDetail;
    private FilterModel filter = new() { StartDate = DateTime.Today.AddDays(-30), EndDate = DateTime.Today.AddDays(1).AddTicks(-1) };
    private DateTime lastSearchTime = DateTime.MinValue;
    private readonly TimeSpan debounceDelay = TimeSpan.FromMilliseconds(500);

    private class FilterModel
    {
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClinicManagement_API");
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        try
        {
            isLoading = true;
            var query = $"Reports/GetDetailedRevenueReportAsync?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
            {
                query += $"&search={Uri.EscapeDataString(searchQuery)}";
            }
            if (filter.StartDate.HasValue)
            {
                query += $"&startDate={filter.StartDate.Value:yyyy-MM-dd}";
            }
            if (filter.EndDate.HasValue)
            {
                var endDateWithTime = filter.EndDate.Value.Date.AddDays(1).AddTicks(-1);
                query += $"&endDate={endDateWithTime:yyyy-MM-ddTHH:mm:ss}";
            }

            var resp = await _httpClient.GetFromJsonAsync<ResponseValue<PagedResult<DetailedInvoiceDTO>>>(query);
            if (resp?.Status == StatusReponse.Success && resp.Content != null)
            {
                Invoices = resp.Content.Items.ToList();
                totalItems = resp.Content.TotalItems;
                totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            }
            else
            {
                ShowToast($"Không thể tải danh sách hóa đơn: {resp?.Message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi gọi API: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        if (DateTime.Now - lastSearchTime < debounceDelay)
        {
            return;
        }
        lastSearchTime = DateTime.Now;
        currentPage = 1;
        await LoadInvoices();
    }

    private async Task ApplyFilter()
    {
        currentPage = 1;
        await LoadInvoices();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadInvoices();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadInvoices();
        }
    }

    private async Task ExportToCsv()
    {
        try
        {
            var csv = "Mã Hóa Đơn,Ngày Hóa Đơn,Bệnh Nhân,Tổng Cộng,Ngày Cuộc Hẹn\n";
            foreach (var item in Invoices)
            {
                csv += $"INV{item.InvoiceId},{item.InvoiceDate:dd/MM/yyyy},{item.PatientName.Replace(",", "")},{item.TotalAmount.ToString("N0")},{(item.AppointmentDate?.ToString("dd/MM/yyyy") ?? "N/A").Replace(",", "")}\n";
            }
            await JSRuntime.InvokeVoidAsync("downloadCsv", "DetailedRevenueReport.csv", csv);
            ShowToast("Xuất CSV thành công!", "success");
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi xuất CSV: {ex.Message}", "error");
        }
    }

    private void ViewInvoiceDetails(DetailedInvoiceDTO item)
    {
        currentDetail = item;
        showDetailModal = true;
        StateHasChanged();
    }

    private void ShowToast(string message, string type)
    {
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
    }

    private async Task HideToast()
    {
        showToast = false;
        toastMessage = "";
        toastType = "info";
        StateHasChanged();
    }
}