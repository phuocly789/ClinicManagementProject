@page "/admin/import-report"
@using System.Text.Json
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
<PageTitle>Quản Lý Nhập Hàng</PageTitle>

<!-- Component Loading -->
<Loading IsLoading="@isLoading" />

<div class="main-content">
    <header class="header">
        <h1>Quản Lý Nhập Hàng</h1>
    </header>

    <!-- Component ToastNotification -->
    <ToastNotification IsVisible="@showToast" Message="@toastMessage" ToastType="@toastType" OnClose="HideToast" />

    <!-- Bộ lọc và quản lý nhà cung cấp -->
    <div class="filter-container mb-3">
        <div class="row">
            <div class="col-md-3">
                <label>Từ ngày:</label>
                <InputDate class="form-control" @bind-Value="filter.StartDate" />
            </div>
            <div class="col-md-3">
                <label>Đến ngày:</label>
                <InputDate class="form-control" @bind-Value="filter.EndDate" />
            </div>
            <div class="col-md-3">
                <label>Nhà cung cấp:</label>
                <InputSelect class="form-control" @bind-Value="filter.SupplierId">
                    <option value="">Tất cả</option>
                    @foreach (var supplier in suppliers)
                    {
                        <option value="@supplier.SupplierId">@supplier.SupplierName</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-3 align-self-end">
                <button class="btn btn-primary" @onclick="ApplyFilter">Lọc</button>
                <button class="btn btn-secondary" @onclick="ExportToCsv">Xuất CSV</button>
                <button class="btn btn-success" @onclick="ShowAddSupplierModal">Thêm Nhà Cung Cấp</button>
            </div>
        </div>
    </div>

    <!-- Modal quản lý nhà cung cấp -->
    <Modal IsVisible="@showSupplierModal" Title="@(editingSupplier != null ? "Sửa Nhà Cung Cấp" : "Thêm Nhà Cung Cấp")" 
           Message="@modalMessage" ShowConfirmButton="true" OnConfirm="SaveSupplier" OnCancel="HideSupplierModal">
        <div class="modal-body">
            <div class="mb-3">
                <label class="form-label">Tên Nhà Cung Cấp</label>
                <InputText class="form-control" @bind-Value="newSupplier.SupplierName" />
            </div>
            <div class="mb-3">
                <label class="form-label">Số Điện Thoại</label>
                <InputText class="form-control" @bind-Value="newSupplier.PhoneNumber" />
            </div>
            <div class="mb-3">
                <label class="form-label">Địa Chỉ</label>
                <InputText class="form-control" @bind-Value="newSupplier.Address" />
            </div>
        </div>
    </Modal>

    <!-- Bảng chi tiết hóa đơn nhập -->
    <div class="table-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Mã Hóa Đơn</th>
                    <th>Ngày Nhập</th>
                    <th>Nhà Cung Cấp</th>
                    <th>Thuốc</th>
                    <th>Số Lượng</th>
                    <th>Giá Nhập</th>
                    <th>Tổng Cộng</th>
                    <th>Ghi Chú</th>
                    <th>Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @if (report?.Details?.Items == null || report.Details.Items.Count == 0 || isLoading)
                {
                    <tr>
                        <td colspan="9">Không có dữ liệu để hiển thị.</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in report.Details.Items)
                    {
                        @foreach (var detail in item.Details)
                        {
                            <tr>
                                <td>@item.ImportId</td>
                                <td>@item.ImportDate.ToString("dd/MM/yyyy")</td>
                                <td>@item.SupplierName</td>
                                <td>@detail.MedicineName</td>
                                <td>@detail.Quantity</td>
                                <td>@detail.ImportPrice.ToString("N0") VNĐ</td>
                                <td>@detail.SubTotal.ToString("N0") VNĐ</td>
                                <td>@item.Notes</td>
                                <td>
                                    <button class="btn btn-info btn-sm" @onclick="() => ShowEditSupplierModal(item.SupplierId)">Sửa NCC</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteSupplier(item.SupplierId)">Xóa NCC</button>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Phân trang -->
    @if (report?.Details?.TotalItems > report?.Details?.PageSize)
    {
        <div class="pagination">
            <button class="btn btn-primary" disabled="@(currentPage <= 1)" @onclick="PreviousPage">Trước</button>
            <span>Trang @currentPage / @totalPages</span>
            <button class="btn btn-primary" disabled="@(currentPage >= totalPages)" @onclick="NextPage">Tiếp</button>
        </div>
    }
</div>

@code {
    private HttpClient _httpClient;
    private ImportReportDTO report;
    private List<SupplierDTO> suppliers = new List<SupplierDTO>();
    private bool isLoading = false;
    private bool showToast = false;
    private string toastMessage = "";
    private string toastType = "info";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private FilterModel filter = new FilterModel
    {
        StartDate = DateTime.Today.AddDays(-30),
        EndDate = DateTime.Today
    };
    private bool showSupplierModal = false;
    private string modalMessage = "";
    private SupplierDTO newSupplier = new SupplierDTO();
    private SupplierDTO editingSupplier = null;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClinicManagement_API");
        await LoadSuppliers();
        await LoadReport();
    }

    private async Task LoadSuppliers()
    {
        try
        {
            isLoading = true;
            var response = await _httpClient.GetFromJsonAsync<ResponseValue<List<SupplierDTO>>>("Supplier/GetAllSupplierAsync");
            if (response?.Status == StatusReponse.Success && response.Content != null)
            {
                suppliers = response.Content;
            }
            else
            {
                ShowToast($"Không thể tải danh sách nhà cung cấp: {response?.Message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi tải danh sách nhà cung cấp: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadReport()
    {
        try
        {
            isLoading = true;
            var query = $"Import/GenerateImportReport?page={currentPage}&pageSize={pageSize}";
            if (filter.SupplierId.HasValue)
                query += $"&supplierId={filter.SupplierId.Value}";
            if (filter.StartDate.HasValue)
                query += $"&startDate={filter.StartDate.Value:yyyy-MM-dd}";
            if (filter.EndDate.HasValue)
                query += $"&endDate={filter.EndDate.Value:yyyy-MM-dd}";

            var response = await _httpClient.GetFromJsonAsync<ResponseValue<ImportReportDTO>>(query);
            if (response?.Status == StatusReponse.Success && response.Content != null)
            {
                report = response.Content;
                totalPages = (int)Math.Ceiling((double)report.Details.TotalItems / pageSize);
            }
            else
            {
                ShowToast($"Không thể tải báo cáo: {response?.Message ?? "Lỗi không xác định"}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi gọi API: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilter()
    {
        currentPage = 1;
        await LoadReport();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadReport();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadReport();
        }
    }

    private async Task ExportToCsv()
    {
        try
        {
            var csvContent = "Mã Hóa Đơn,Ngày Nhập,Nhà Cung Cấp,Thuốc,Số Lượng,Giá Nhập,Tổng Cộng,Ghi Chú\n";
            foreach (var item in report.Details.Items)
            {
                foreach (var detail in item.Details)
                {
                    csvContent += $"{item.ImportId},{item.ImportDate:dd/MM/yyyy},{item.SupplierName.Replace(",", "")},{detail.MedicineName.Replace(",", "")},{detail.Quantity},{detail.ImportPrice:N0},{detail.SubTotal:N0},{item.Notes?.Replace(",", "") ?? ""}\n";
                }
            }
            await JSRuntime.InvokeVoidAsync("downloadCsv", "ImportReport.csv", csvContent);
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xuất CSV: {ex.Message}", "error");
        }
    }

    private void ShowAddSupplierModal()
    {
        newSupplier = new SupplierDTO();
        editingSupplier = null;
        showSupplierModal = true;
        modalMessage = "Vui lòng nhập thông tin nhà cung cấp.";
    }

    private void ShowEditSupplierModal(int supplierId)
    {
        editingSupplier = suppliers.FirstOrDefault(s => s.SupplierId == supplierId);
        newSupplier = editingSupplier != null ? new SupplierDTO
        {
            SupplierId = editingSupplier.SupplierId,
            SupplierName = editingSupplier.SupplierName,
            PhoneNumber = editingSupplier.PhoneNumber,
            Address = editingSupplier.Address
        } : new SupplierDTO();
        showSupplierModal = true;
        modalMessage = "Vui lòng cập nhật thông tin nhà cung cấp.";
    }

    private async Task SaveSupplier()
    {
        try
        {
            var request = new ResponseValue<SupplierDTO> { Content = newSupplier };
            if (editingSupplier != null)
            {
                var response = await _httpClient.PutAsJsonAsync("Supplier/UpdateSupplierAsync", request);
                response.EnsureSuccessStatusCode();
                ShowToast("Cập nhật nhà cung cấp thành công!", "success");
            }
            else
            {
                var response = await _httpClient.PostAsJsonAsync("Supplier/CreateSupplierAsync", request);
                response.EnsureSuccessStatusCode();
                ShowToast("Thêm nhà cung cấp thành công!", "success");
            }
            await LoadSuppliers();
            HideSupplierModal();
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi lưu nhà cung cấp: {ex.Message}", "error");
        }
    }

    private async Task DeleteSupplier(int supplierId)
    {
        try
        {
            var response = await _httpClient.DeleteAsync($"Supplier/DeleteSupplierAsync?supplierId={supplierId}");
            response.EnsureSuccessStatusCode();
            ShowToast("Xóa nhà cung cấp thành công!", "success");
            await LoadSuppliers();
        }
        catch (Exception ex)
        {
            ShowToast($"Lỗi khi xóa nhà cung cấp: {ex.Message}", "error");
        }
    }

    private void HideSupplierModal()
    {
        showSupplierModal = false;
        newSupplier = new SupplierDTO();
        editingSupplier = null;
    }

    private void ShowToast(string message, string type)
    {
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
    }

    private void HideToast()
    {
        showToast = false;
        StateHasChanged();
    }

    private class FilterModel
    {
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public int? SupplierId { get; set; }
    }

    private class SupplierDTO
    {
        public int SupplierId { get; set; }
        public string SupplierName { get; set; }
        public string PhoneNumber { get; set; }
        public string Address { get; set; }
    }
}
